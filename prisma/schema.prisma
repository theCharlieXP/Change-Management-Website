// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String    // Clerk user ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model SavedInsight {
  id        String    @id @default(cuid())
  insightId String    // ID of the insight from the insights API
  projectId String    // Reference to the project this insight is saved to
  userId    String    // Clerk user ID
  notes     String?   // Optional notes about the insight
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@index([projectId])
  @@index([insightId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  insights    Insight[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Insight {
  id          String     @id @default(cuid())
  title       String
  summary     String
  content     String     @db.Text
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tags        String[]
  readTime    Int        // in minutes
  source      String?    // URL or reference
}

// New models for subscription management
model UserSubscription {
  id                String    @id @default(cuid())
  userId            String    // Clerk user ID
  stripeCustomerId  String?   // Stripe customer ID
  stripeSubscriptionId String? // Stripe subscription ID
  stripePriceId     String?   // Stripe price ID
  stripeCurrentPeriodEnd DateTime? // When the current billing period ends
  status            String    // 'active', 'canceled', 'past_due', etc.
  plan              String    // 'basic', 'pro'
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model UsageTracker {
  id                String    @id @default(cuid())
  userId            String    // Clerk user ID
  featureId         String    // e.g., 'insight_search'
  count             Int       @default(0)
  lastUsedAt        DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([featureId])
  @@unique([userId, featureId], name: "userId_featureId") // Each user can have only one tracker per feature
}
